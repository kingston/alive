// Generated by CoffeeScript 1.6.3
(function() {
  var Animal, Background, Bird, Controller, Creature, DrawingUtil, KeyboardController, Scene, Util, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.AliveApplication = (function() {
    function AliveApplication() {}

    AliveApplication.prototype.run = function() {
      this.scene = new Scene();
      this.scene.initialize();
      this.controller = new KeyboardController();
      this.controller.initialize(this.scene);
      return window.setTimeout(function() {
        return $("#overlay").fadeOut(500);
      }, 1000);
    };

    return AliveApplication;

  })();

  Background = (function() {
    function Background(p) {
      this.skyColor = p.color(211, 26, 95);
      this.groundHeight = 150;
      this.groundColor = p.color(15, 52, 60);
    }

    Background.prototype.draw = function(p) {
      p.background(this.skyColor);
      p.fill(this.groundColor);
      p.noStroke();
      return p.rect(0, p.height - this.groundHeight, p.width, this.groundHeight);
    };

    return Background;

  })();

  Controller = (function() {
    function Controller() {}

    Controller.prototype.moveSpeed = 400;

    Controller.prototype.moveLeft = false;

    Controller.prototype.moveRight = false;

    Controller.prototype.initialize = function(scene) {
      var p;
      this.scene = scene;
      p = scene.processing;
      this.x = p.width / 2;
      this.y = p.height / 2;
      this.color = p.color(60, 48, 92, 0.05);
      this.radius = 200;
      return scene.registerController(this);
    };

    Controller.prototype.update = function(p, time, dt) {
      if (this.moveLeft) {
        this.x -= dt * this.moveSpeed / 1000.0;
      }
      if (this.moveRight) {
        this.x += dt * this.moveSpeed / 1000.0;
      }
      if (this.x < this.radius) {
        return this.x = this.radius;
      } else if (this.x > p.width - this.radius) {
        return this.x = p.width - this.radius;
      }
    };

    Controller.prototype.draw = function(p) {
      p.pushMatrix();
      p.translate(this.x, this.y);
      p.drawRadialTransparency(-this.width / 2, -this.height / 2, this.radius, this.color, 1, 0);
      return p.popMatrix();
    };

    return Controller;

  })();

  DrawingUtil = {
    drawRadial: function(x, y, radius, centerColor, extremeColor) {
      var color, inter, r, _i, _results;
      _results = [];
      for (r = _i = radius; radius <= 0 ? _i < 0 : _i > 0; r = radius <= 0 ? ++_i : --_i) {
        inter = this.map(r, 0, radius, 0, 1);
        color = this.lerpColor(centerColor, extremeColor, inter);
        this.fill(color);
        _results.push(this.ellipse(x, y, r, r));
      }
      return _results;
    },
    drawRadialTransparency: function(x, y, radius, color, start, end) {
      var inter, r, _i, _results;
      _results = [];
      for (r = _i = radius; radius <= 0 ? _i < 0 : _i > 0; r = radius <= 0 ? ++_i : --_i) {
        inter = this.map(r, 0, radius, start, end);
        this.stroke(color, inter);
        this.strokeWeight(1);
        this.noFill();
        _results.push(this.ellipse(x, y, r, r));
      }
      return _results;
    }
  };

  KeyboardController = (function(_super) {
    __extends(KeyboardController, _super);

    function KeyboardController() {
      _ref = KeyboardController.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    KeyboardController.prototype.leftKey = 65;

    KeyboardController.prototype.rightKey = 68;

    KeyboardController.prototype.initialize = function(scene) {
      var _this = this;
      KeyboardController.__super__.initialize.call(this, scene);
      $(window).keydown(function(e) {
        if (e.which === _this.leftKey) {
          _this.moveLeft = true;
          return e.preventDefault();
        } else if (e.which === _this.rightKey) {
          _this.moveRight = true;
          return e.preventDefault();
        }
      });
      $(window).keyup(function(e) {
        if (e.which === _this.leftKey) {
          _this.moveLeft = false;
          return e.preventDefault();
        } else if (e.which === _this.rightKey) {
          _this.moveRight = false;
          return e.preventDefault();
        }
      });
      return $(window).keypress(function(e) {
        switch (e.which) {
          case 'b'.charCodeAt(0):
            _this.createBird();
            return e.preventDefault();
        }
      });
    };

    KeyboardController.prototype.createBird = function() {
      return this.scene.addAnimal(Bird, Util.pt(this.x, this.y), {});
    };

    return KeyboardController;

  })(Controller);

  Scene = (function() {
    function Scene() {}

    Scene.prototype.initialize = function() {
      var canvas;
      canvas = document.getElementById('scene');
      this.processing = new Processing(canvas, this.sketch.bind(this));
      $.extend(this.processing, DrawingUtil);
      this.animalsLayer = [];
      return this.controllers = [];
    };

    Scene.prototype.addAnimal = function(type, location, config) {
      var p;
      p = this.processing;
      return this.animalsLayer.push(new type(p, location, config));
    };

    Scene.prototype.registerController = function(controller) {
      return this.controllers.push(controller);
    };

    Scene.prototype.setup = function(p) {
      p.colorMode(p.HSB, 360, 100, 100, 1);
      p.size($(window).width(), $(window).height());
      this.background = new Background(p);
      return this.lastUpdate = p.millis();
    };

    Scene.prototype.draw = function(p) {
      var animal, controller, dt, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref1, _ref2, _ref3, _ref4;
      this.background.draw(p);
      dt = p.millis() - this.lastUpdate;
      _ref1 = this.controllers;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        controller = _ref1[_i];
        controller.update(p, p.millis(), dt);
      }
      _ref2 = this.animalsLayer;
      for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
        animal = _ref2[_j];
        animal.update(p, p.millis(), dt);
      }
      _ref3 = this.controllers;
      for (_k = 0, _len2 = _ref3.length; _k < _len2; _k++) {
        controller = _ref3[_k];
        controller.draw(p);
      }
      _ref4 = this.animalsLayer;
      for (_l = 0, _len3 = _ref4.length; _l < _len3; _l++) {
        animal = _ref4[_l];
        animal.draw(p);
      }
      return this.lastUpdate = p.millis();
    };

    Scene.prototype.sketch = function(p) {
      p.setup = this.setup.bind(this, p);
      return p.draw = this.draw.bind(this, p);
    };

    Scene.prototype.unload = function() {
      return this.processing.exit();
    };

    return Scene;

  })();

  Util = (function() {
    function Util() {}

    Util.pt = function(x, y) {
      return {
        x: x,
        y: y
      };
    };

    return Util;

  })();

  Creature = (function() {
    function Creature(p, spawnLocation) {
      this.location = spawnLocation;
    }

    Creature.prototype.update = function(p, time, dt) {};

    Creature.prototype.draw = function(p) {};

    return Creature;

  })();

  Animal = (function(_super) {
    __extends(Animal, _super);

    function Animal(p, spawnLocation) {
      Animal.__super__.constructor.call(this, p, spawnLocation);
    }

    return Animal;

  })(Creature);

  Bird = (function(_super) {
    __extends(Bird, _super);

    function Bird(p, spawnLocation, config) {
      Bird.__super__.constructor.call(this, p, spawnLocation);
      this.bodyColor = p.color(8, 38, 99);
      this.strokeColor = p.color(0, 0, 0);
      this.width = 50;
      this.height = 30;
    }

    Bird.prototype.update = function(p, time, dt) {};

    Bird.prototype.draw = function(p) {
      p.pushMatrix();
      p.translate(this.location.x, this.location.y);
      p.fill(this.bodyColor);
      p.stroke(this.strokeColor);
      p.strokeWeight(2);
      p.ellipse(-this.width / 2, -this.height / 2, this.width, this.height);
      return p.popMatrix();
    };

    return Bird;

  })(Animal);

}).call(this);

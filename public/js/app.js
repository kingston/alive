// Generated by CoffeeScript 1.6.3
(function() {
  var Animal, Background, Bird, Controller, Creature, DrawingUtil, Grass, KeyboardController, LeapController, Plant, Scene, Util, _ref, _ref1,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.AliveApplication = (function() {
    function AliveApplication() {}

    AliveApplication.prototype.run = function() {
      this.scene = new Scene();
      this.scene.initialize();
      this.controller = new LeapController();
      this.controller.initialize(this.scene);
      return window.setTimeout(function() {
        return $("#overlay").fadeOut(500);
      }, 1000);
    };

    return AliveApplication;

  })();

  Background = (function() {
    function Background(p) {
      this.skyColor = p.color(211, 26, 95);
      this.groundHeight = 150;
      this.groundColor = p.color(15, 52, 60);
    }

    Background.prototype.draw = function(p) {
      p.background(this.skyColor);
      p.fill(this.groundColor);
      p.noStroke();
      return p.rect(0, p.height - this.groundHeight, p.width, this.groundHeight);
    };

    return Background;

  })();

  Controller = (function() {
    function Controller() {}

    Controller.prototype.moveSpeed = 400;

    Controller.prototype.moveLeft = false;

    Controller.prototype.moveRight = false;

    Controller.prototype.initialize = function(scene) {
      var p;
      this.scene = scene;
      p = scene.processing;
      this.x = p.width / 2;
      this.y = p.height / 2;
      this.color = p.color(60, 48, 92, 0.05);
      this.radius = 200;
      return scene.registerController(this);
    };

    Controller.prototype.update = function(p, time, dt) {
      if (this.moveLeft) {
        this.x -= dt * this.moveSpeed / 1000.0;
      }
      if (this.moveRight) {
        this.x += dt * this.moveSpeed / 1000.0;
      }
      if (this.x < 0) {
        return this.x = p.width;
      } else if (this.x > p.width) {
        return this.x = 0;
      }
    };

    Controller.prototype.draw = function(p) {
      p.pushMatrix();
      p.translate(this.x, this.y);
      p.drawRadialTransparency(-this.width / 2, -this.height / 2, this.radius, this.color, 1, 0);
      return p.popMatrix();
    };

    return Controller;

  })();

  DrawingUtil = {
    drawRadial: function(x, y, radius, centerColor, extremeColor) {
      var color, inter, r, _i, _results;
      _results = [];
      for (r = _i = radius; radius <= 0 ? _i < 0 : _i > 0; r = radius <= 0 ? ++_i : --_i) {
        inter = this.map(r, 0, radius, 0, 1);
        color = this.lerpColor(centerColor, extremeColor, inter);
        this.fill(color);
        _results.push(this.ellipse(x, y, r, r));
      }
      return _results;
    },
    drawRadialTransparency: function(x, y, radius, color, start, end) {
      var inter, r, _i, _results;
      _results = [];
      for (r = _i = radius; radius <= 0 ? _i < 0 : _i > 0; r = radius <= 0 ? ++_i : --_i) {
        inter = this.map(r, 0, radius, start, end);
        this.stroke(color, inter);
        this.strokeWeight(1);
        this.noFill();
        _results.push(this.ellipse(x, y, r, r));
      }
      return _results;
    },
    aliveShapes: {},
    preloadAliveShapes: function() {
      var name, names, _i, _len, _results;
      names = ['bird', 'grass'];
      _results = [];
      for (_i = 0, _len = names.length; _i < _len; _i++) {
        name = names[_i];
        _results.push(this.aliveShapes[name] = this.loadShape('svg/' + name + ".svg"));
      }
      return _results;
    },
    getShape: function(shapeName) {
      return this.aliveShapes[shapeName];
    }
  };

  KeyboardController = (function(_super) {
    __extends(KeyboardController, _super);

    function KeyboardController() {
      _ref = KeyboardController.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    KeyboardController.prototype.leftKey = 65;

    KeyboardController.prototype.rightKey = 68;

    KeyboardController.prototype.initialize = function(scene) {
      var _this = this;
      KeyboardController.__super__.initialize.call(this, scene);
      $(window).keydown(function(e) {
        if (e.which === _this.leftKey) {
          _this.moveLeft = true;
          return e.preventDefault();
        } else if (e.which === _this.rightKey) {
          _this.moveRight = true;
          return e.preventDefault();
        }
      });
      $(window).keyup(function(e) {
        if (e.which === _this.leftKey) {
          _this.moveLeft = false;
          return e.preventDefault();
        } else if (e.which === _this.rightKey) {
          _this.moveRight = false;
          return e.preventDefault();
        }
      });
      return $(window).keypress(function(e) {
        switch (e.which) {
          case 'b'.charCodeAt(0):
            _this.scene.addAnimal(Bird, Util.pt(_this.x, _this.y), {});
            return e.preventDefault();
          case 'g'.charCodeAt(0):
            return _this.scene.addPlant(Grass, Util.pt(_this.x, _this.y), {});
        }
      });
    };

    return KeyboardController;

  })(Controller);

  LeapController = (function(_super) {
    __extends(LeapController, _super);

    function LeapController() {
      _ref1 = LeapController.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    LeapController.prototype.movementThreshold = 0.05;

    LeapController.prototype.initialize = function(scene) {
      var p,
        _this = this;
      LeapController.__super__.initialize.call(this, scene);
      p = scene.processing;
      this.color = p.color(20, 48, 92, 0.05);
      this.controller = new Leap.Controller({
        frameEventName: "deviceFrame",
        enableGestures: true
      });
      this.controller.on('connect', function() {
        console.log("Leap connected!");
        return _this.color = p.color(60, 48, 92, 0.05);
      });
      this.controller.on('deviceConnected', function() {
        console.log("Leap device connected!");
        return _this.color = p.color(101, 48, 92, 0.05);
      });
      this.controller.on('frame', function(frame) {
        return _this.processFrame(frame);
      });
      return this.controller.connect();
    };

    LeapController.prototype.onCircle = function(frame, gesture) {
      if (gesture.state !== "stop") {
        return;
      }
      if (gesture.duration < 1000 * 500) {
        return;
      }
      if (gesture.progress < 1) {
        return;
      }
      return this.scene.addAnimal(Bird, Util.pt(this.x, this.y), {});
    };

    LeapController.prototype.onSwipe = function(frame, gesture) {
      var end, i, start, _i, _ref2, _results;
      if (gesture.state !== "stop") {
        return;
      }
      start = this.leapToScene(frame, gesture.startPosition);
      end = this.leapToScene(frame, gesture.position);
      _results = [];
      for (i = _i = 0, _ref2 = Util.randInt(1, 5); 0 <= _ref2 ? _i <= _ref2 : _i >= _ref2; i = 0 <= _ref2 ? ++_i : --_i) {
        _results.push(this.scene.addPlant(Grass, Util.pt(this.x, this.y), {}));
      }
      return _results;
    };

    LeapController.prototype.processFrame = function(frame) {
      var gesture, hand, len, movement, y1, y2, _i, _len, _ref2;
      _ref2 = frame.gestures;
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        gesture = _ref2[_i];
        switch (gesture.type) {
          case "circle":
            this.onCircle(frame, gesture);
            break;
          case "swipe":
            this.onSwipe(frame, gesture);
        }
      }
      movement = false;
      if (frame.hands.length === 1) {
        hand = frame.hands[0];
        len = hand.fingers.length;
        if (len > 2) {
          y1 = this.leapToScene(frame, hand.fingers[0].tipPosition)[1];
          y2 = this.leapToScene(frame, hand.fingers[len - 1].tipPosition)[1];
          if (y1 > y2 + this.movementThreshold) {
            this.moveLeft = true;
            movement = true;
          } else if (y2 > y1 + this.movementThreshold) {
            this.moveRight = true;
            movement = true;
          }
        }
      }
      if (movement) {

      } else {
        this.moveLeft = false;
        return this.moveRight = false;
      }
    };

    LeapController.prototype.leapToScene = function(frame, leapPos) {
      var iBox, left, top, x, y;
      iBox = frame.interactionBox;
      left = iBox.center[0] - iBox.size[0] / 2;
      top = iBox.center[1] + iBox.size[1] / 2;
      x = leapPos[0] - left;
      y = leapPos[1] - top;
      x /= iBox.size[0];
      y /= iBox.size[1];
      x *= 1;
      y *= 1;
      return [x, -y];
    };

    return LeapController;

  })(KeyboardController);

  Scene = (function() {
    function Scene() {}

    Scene.prototype.initialize = function() {
      var canvas;
      canvas = document.getElementById('scene');
      this.processing = new Processing(canvas, this.sketch.bind(this));
      this.animalsLayer = [];
      this.plantsLayer = [];
      return this.controllers = [];
    };

    Scene.prototype.addAnimal = function(type, location, config) {
      var p;
      p = this.processing;
      return this.animalsLayer.push(new type(p, location, this, config));
    };

    Scene.prototype.addPlant = function(type, location, config) {
      var p;
      p = this.processing;
      this.plantsLayer.push(new type(p, location, this, config));
      return this.plantsLayer.sort(function(a, b) {
        return a.location.y - b.location.y;
      });
    };

    Scene.prototype.registerController = function(controller) {
      return this.controllers.push(controller);
    };

    Scene.prototype.setup = function(p) {
      p.colorMode(p.HSB, 360, 100, 100, 1);
      p.size($(window).width(), $(window).height());
      this.background = new Background(p);
      p.preloadAliveShapes();
      return this.lastUpdate = p.millis();
    };

    Scene.prototype.draw = function(p) {
      var animal, controller, dt, plant, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _len5, _m, _n, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7;
      this.background.draw(p);
      dt = p.millis() - this.lastUpdate;
      _ref2 = this.controllers;
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        controller = _ref2[_i];
        controller.update(p, p.millis(), dt);
      }
      _ref3 = this.animalsLayer;
      for (_j = 0, _len1 = _ref3.length; _j < _len1; _j++) {
        animal = _ref3[_j];
        animal.update(p, p.millis(), dt);
      }
      _ref4 = this.plantsLayer;
      for (_k = 0, _len2 = _ref4.length; _k < _len2; _k++) {
        plant = _ref4[_k];
        plant.update(p, p.millis(), dt);
      }
      _ref5 = this.controllers;
      for (_l = 0, _len3 = _ref5.length; _l < _len3; _l++) {
        controller = _ref5[_l];
        controller.draw(p);
      }
      _ref6 = this.animalsLayer;
      for (_m = 0, _len4 = _ref6.length; _m < _len4; _m++) {
        animal = _ref6[_m];
        animal.draw(p);
      }
      _ref7 = this.plantsLayer;
      for (_n = 0, _len5 = _ref7.length; _n < _len5; _n++) {
        plant = _ref7[_n];
        plant.draw(p);
      }
      return this.lastUpdate = p.millis();
    };

    Scene.prototype.sketch = function(p) {
      $.extend(p, DrawingUtil);
      p.setup = this.setup.bind(this, p);
      return p.draw = this.draw.bind(this, p);
    };

    Scene.prototype.unload = function() {
      return this.processing.exit();
    };

    return Scene;

  })();

  Util = (function() {
    function Util() {}

    Util.pt = function(x, y) {
      return {
        x: x,
        y: y
      };
    };

    Util.randInt = function(min, max) {
      return Math.floor(Math.random() * (max - min)) + min;
    };

    Util.rand = function(min, max) {
      return Math.random() * (max - min) + min;
    };

    Util.bound = function(val, min, max) {
      if (val < min) {
        return min;
      } else if (val > max) {
        return max;
      } else {
        return val;
      }
    };

    Util.loop = function(val, min, max) {
      if (val < min) {
        return max;
      } else if (val > max) {
        return min;
      } else {
        return val;
      }
    };

    Util.cycle = function(time, frequency, offset) {
      offset = offset || 0;
      return Math.sin(time * Math.PI * 2 / 1000.0 * frequency + offset);
    };

    Util.dist = function(pt1, pt2) {
      return this.magnitude(this.subPt(pt1, pt2));
    };

    Util.magnitude = function(vec) {
      return Math.sqrt(Math.pow(vec.dx, 2) + Math.pow(vec.dy, 2));
    };

    Util.subPt = function(pt1, pt2) {
      return {
        dx: pt1.x - pt2.x,
        dy: pt1.y - pt2.y
      };
    };

    Util.normalizeVec = function(vec) {
      vec.dx = vec.dx / this.magnitude(vec);
      vec.dy = vec.dy / this.magnitude(vec);
      return vec;
    };

    return Util;

  })();

  Creature = (function() {
    function Creature(p, spawnLocation, scene) {
      this.location = spawnLocation;
      this.scene = scene;
    }

    Creature.prototype.update = function(p, time, dt) {};

    Creature.prototype.draw = function(p) {};

    return Creature;

  })();

  Animal = (function(_super) {
    __extends(Animal, _super);

    function Animal(p, spawnLocation, scene) {
      Animal.__super__.constructor.call(this, p, spawnLocation, scene);
    }

    return Animal;

  })(Creature);

  Bird = (function(_super) {
    __extends(Bird, _super);

    Bird.prototype.flapRate = 2;

    function Bird(p, spawnLocation, scene, config) {
      var shape;
      Bird.__super__.constructor.call(this, p, spawnLocation, scene);
      this.imposition = Util.rand(10, 40);
      this.bodyColor = p.color(8, this.imposition, 99);
      this.strokeColor = p.color(0, 0, 0);
      this.width = 120;
      this.height = 60;
      shape = p.getShape("bird");
      this.fixedShape = shape.getChild('fixed');
      this.body = shape.getChild('body');
      this.body.disableStyle();
      this.frontWing = shape.getChild('frontWing');
      this.frontWing.disableStyle();
      this.backWing = shape.getChild('backWing');
      this.backWing.disableStyle();
      this.offset = Math.random() * 100;
      this.idealHeight = Util.randInt(50, 200);
      this.speed = Util.randInt(90, 110);
      this.forwardDesire = Math.random() + 0.5;
    }

    Bird.prototype.setWingHeight = function(wing, height) {
      var i, _i, _results;
      _results = [];
      for (i = _i = 2; _i <= 4; i = ++_i) {
        _results.push(wing.vertices[i][1] = height);
      }
      return _results;
    };

    Bird.prototype.update = function(p, time, dt) {
      var t;
      t = Util.cycle(time, this.flapRate, this.offset);
      this.backHeight = p.map(t, -1, 1, 40, 170);
      this.frontHeight = p.map(t, -1, 1, 20, 190);
      this.calculateVelocity();
      this.location.x += dt / 1000.0 * this.speed * this.dx;
      this.location.y += dt / 1000.0 * this.speed * this.dy;
      this.location.y = Util.bound(this.location.y, 0, p.height);
      return this.location.x = Util.loop(this.location.x, 0 - this.width, this.width * 2 + p.width);
    };

    Bird.prototype.calculateVelocity = function() {
      var animal, dist, dx, dy, len, loc, neighborLocations, newVec, sumX, sumY, vec, _i, _j, _len, _len1, _ref2;
      dx = this.forwardDesire;
      dy = 0;
      neighborLocations = [];
      _ref2 = this.scene.animalsLayer;
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        animal = _ref2[_i];
        if (animal instanceof Bird && animal !== this) {
          dist = Util.dist(animal.location, this.location);
          if (dist < 300) {
            vec = Util.normalizeVec(Util.subPt(this.location, animal.location));
            dx += dist / 300.0 * vec.dx;
            dy += dist / 300.0 * vec.dy;
            neighborLocations.push(animal.location);
          }
        }
      }
      sumX = 0;
      sumY = 0;
      len = neighborLocations.length;
      if (len > 0) {
        for (_j = 0, _len1 = neighborLocations.length; _j < _len1; _j++) {
          loc = neighborLocations[_j];
          sumX += loc.x;
          sumY += loc.y;
        }
        vec = Util.normalizeVec(Util.subPt(Util.pt(sumX / len, sumY / len), this.location));
        dx += vec.dx * len * this.imposition / 80.0;
        dy += vec.dy * len * this.imposition / 80.0;
      }
      dy += Math.max(-2, Math.min(2, (this.idealHeight - this.location.y) / 200.0));
      newVec = Util.normalizeVec({
        dx: dx,
        dy: dy
      });
      this.dx = newVec.dx;
      return this.dy = newVec.dy;
    };

    Bird.prototype.draw = function(p) {
      p.pushMatrix();
      p.translate(this.location.x - this.width / 2, this.location.y - this.width / 2);
      p.scale(this.width / 200, this.height / 100);
      p.fill(this.bodyColor);
      p.stroke(this.strokeColor);
      p.strokeWeight(2);
      this.setWingHeight(this.backWing, this.backHeight);
      this.setWingHeight(this.frontWing, this.frontHeight);
      p.shape(this.backWing, 0, 0, 200, 100);
      p.shape(this.body, 0, 0, 200, 100);
      p.shape(this.fixedShape, 0, 0, 200, 100);
      p.shape(this.frontWing, 0, 0, 200, 100);
      return p.popMatrix();
    };

    return Bird;

  })(Animal);

  Plant = (function(_super) {
    __extends(Plant, _super);

    function Plant(p, spawnLocation, scene) {
      var sign;
      if (Math.random() > 0.5) {
        sign = 1;
      } else {
        sign = -1;
      }
      spawnLocation.x += Math.exp(-Util.rand(0, 4)) * 200 * sign;
      spawnLocation.y = p.height - Util.rand(10, scene.background.groundHeight);
      Plant.__super__.constructor.call(this, p, spawnLocation, scene);
    }

    return Plant;

  })(Creature);

  Grass = (function(_super) {
    __extends(Grass, _super);

    Grass.prototype.swayRate = 0.01;

    function Grass(p, spawnLocation, scene) {
      var b;
      Grass.__super__.constructor.call(this, p, spawnLocation, scene);
      b = Util.randInt(50, 80);
      this.color = p.color(100, 54, b);
      this.width = 10;
      this.height = 100;
      this.grassShape = p.getShape('grass').getChild('stem');
      this.grassShape.disableStyle();
      this.tipX = Util.randInt(-10, 30);
      this.tipY = Util.randInt(-70, 50);
      this.scale = 0;
    }

    Grass.prototype.setGrassTip = function(shape, x, y) {
      var i, _i, _results;
      _results = [];
      for (i = _i = 2; _i <= 4; i = ++_i) {
        shape.vertices[i][0] = x;
        _results.push(shape.vertices[i][1] = y);
      }
      return _results;
    };

    Grass.prototype.update = function(p, time, dt) {
      if (this.scale < 1) {
        return this.scale += (1 - this.scale) * dt / 500.0;
      }
    };

    Grass.prototype.draw = function(p) {
      p.pushMatrix();
      p.translate(this.location.x - this.width / 2, this.location.y);
      p.scale(1, this.scale);
      p.stroke(p.color(0, 0, 0));
      p.fill(this.color);
      this.setGrassTip(this.grassShape, this.tipX, this.tipY);
      p.shape(this.grassShape, 0, -100, 10, 100);
      return p.popMatrix();
    };

    return Grass;

  })(Plant);

}).call(this);
